{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## References\n",
        "- https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-and-where?tabs=python\n",
        "- https://docs.microsoft.com/en-us/azure/machine-learning/how-to-use-environments\n",
        "- https://docs.microsoft.com/en-us/python/api/azureml-core/azureml.core.model.inferenceconfig?view=azure-ml-py\n",
        "- https://github.com/Azure/MachineLearningNotebooks/blob/master/how-to-use-azureml/deployment/deploy-to-cloud/model-register-and-deploy.ipynb"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import azureml.core\n",
        "from azureml.core import Workspace\n",
        "from azureml.core.authentication import ServicePrincipalAuthentication\n",
        "\n",
        "from azureml.core.conda_dependencies import CondaDependencies\n",
        "from azureml.core.image import ContainerImage, Image\n",
        "from azureml.core.model import Model"
      ],
      "outputs": [],
      "execution_count": 28,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "tenant_id = \"72f988bf-86f1-41af-91ab-2d7cd011db47\"\n",
        "client_id = \"2a81532b-016b-4c0e-aa43-bd9b97fbdaba\"\n",
        "client_secret = \"NrL7Q~-CfUgOqeqJtC86ARcf2JSl2vBrHlTI5\"\n",
        "sp = ServicePrincipalAuthentication(tenant_id=tenant_id, # tenantID\n",
        "                                    service_principal_id=client_id, # clientId\n",
        "                                    service_principal_password=client_secret) # clientSecret\n",
        "\n",
        "subscription_id = '7e48a1e8-8d3e-4e00-8bc0-098c43f5ace7'\n",
        "\n",
        "# Azure Machine Learning resource group NOT the managed resource group\n",
        "resource_group = 'rg-mlops-demo-dev' \n",
        "\n",
        "#Azure Machine Learning workspace name, NOT Azure Databricks workspace\n",
        "workspace_name = 'ws-demo' \n",
        "ws = Workspace.get(name=workspace_name,\n",
        "                   auth=sp,\n",
        "                   subscription_id=subscription_id\n",
        "                  ,resource_group=resource_group)\n",
        "#ws.get_details()\n",
        "dstore = ws.get_default_datastore()\n"
      ],
      "outputs": [],
      "execution_count": 29,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "model_name = \"diabetes\"\n",
        "model_version = 5\n",
        "\n",
        "\n",
        "model_list = Model.list(workspace=ws)\n",
        "model = [m for m in model_list if m.version == model_version and m.name == model_name]\n",
        "if len(model) > 0:\n",
        "    model = model[0]\n",
        "else:\n",
        "    print(\"No model found\")\n",
        "    \n",
        "print(\n",
        "    \"Model picked: {} \\nModel Description: {} \\nModel Version: {}\".format(\n",
        "        model.name, model.description, model.version\n",
        "    )\n",
        ")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Model picked: diabetes \nModel Description: None \nModel Version: 5\n"
        }
      ],
      "execution_count": 31,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "'''environment = Environment('my-sklearn-environment')\n",
        "environment.python.conda_dependencies = CondaDependencies.create(pip_packages=[\n",
        "    'azureml-defaults',\n",
        "    'inference-schema[numpy-support]',\n",
        "    'joblib',\n",
        "    'numpy',\n",
        "    'scikit-learn=={}'.format(sklearn.__version__)\n",
        "])\n",
        "'''"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "'/mnt/batch/tasks/shared/LS_root/mounts/clusters/ws-demo-compute/code/Users/sitandon'"
          },
          "metadata": {}
        }
      ],
      "execution_count": 19,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Environment\n",
        "from azureml.core.model import InferenceConfig\n",
        "\n",
        "#os.chdir(\"./code/scoring\")\n",
        "env = Environment.from_conda_specification(name = \"diabetesenv\",\n",
        "                                             file_path = \"./code/scoring/conda_dependencies.yml\")\n",
        "inference_config = InferenceConfig(\n",
        "    environment=env,\n",
        "    source_directory=\"./code\",\n",
        "    entry_script=\"scoring/score.py\"\n",
        ")\n"
      ],
      "outputs": [],
      "execution_count": 46,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "from azureml.core.webservice import LocalWebservice\n",
        "\n",
        "deployment_config = LocalWebservice.deploy_configuration(port=6789)\n",
        "\n",
        "local_service = Model.deploy(workspace=ws,\n",
        "                      name=service_name,\n",
        "                      models=[model],\n",
        "                      inference_config=inference_config,\n",
        "                      deployment_config=deployment_config,\n",
        "                      overwrite=True)\n",
        "local_service.wait_for_deployment(show_output=True)\n",
        "'''"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "service_name = 'diabetes-srvc1'\n",
        "\n",
        "aci_config = AciWebservice.deploy_configuration(cpu_cores=2, memory_gb=2)\n",
        "\n",
        "service = Model.deploy(workspace=ws,\n",
        "                      name=service_name,\n",
        "                      models=[model],\n",
        "                      inference_config=inference_config,\n",
        "                      deployment_config=aci_config,\n",
        "                      overwrite=True)\n",
        "service.wait_for_deployment(show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Tips: You can try get_logs(): https://aka.ms/debugimage#dockerlog or local deployment: https://aka.ms/debugimage#debug-locally to debug if deployment takes longer than 10 minutes.\nRunning\n2021-11-12 11:22:51+00:00 Creating Container Registry if not exists.\n2021-11-12 11:22:52+00:00 Registering the environment.\n2021-11-12 11:22:52+00:00 Use the existing image.\n2021-11-12 11:22:52+00:00 Generating deployment configuration.\n2021-11-12 11:22:53+00:00 Submitting deployment to compute.\n2021-11-12 11:22:56+00:00 Checking the status of deployment diabetes-srvc1..\n2021-11-12 11:24:29+00:00 Checking the status of inference endpoint diabetes-srvc1.\nSucceeded\nACI service creation operation finished, operation \"Succeeded\"\n"
        }
      ],
      "execution_count": 47,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.webservice import Webservice\n",
        "import json\n",
        "\n",
        "# Get the hosted web service\n",
        "service = Webservice(name=service_name, workspace=ws)\n",
        "\n",
        "# Input for Model with all features\n",
        "input_j = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]\n",
        "print(input_j)\n",
        "test_sample = json.dumps({\"data\": input_j})\n",
        "test_sample = bytes(test_sample, encoding=\"utf8\")\n",
        "try:\n",
        "    prediction = service.run(input_data=test_sample)\n",
        "    print(prediction)\n",
        "except Exception as e:\n",
        "    result = str(e)\n",
        "    print(result)\n",
        "    raise Exception(\"ACI service is not working as expected\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]\n{\"result\": [[5163.778211369122], [3721.5457953747396]]}\n"
        }
      ],
      "execution_count": 50,
      "metadata": {}
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3.8 - AzureML",
      "language": "python",
      "name": "python38-azureml"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.1"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}